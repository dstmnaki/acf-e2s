@name Ammo Storage Model Ver1.0 by Naki
@inputs [Base Gun AmmoBox]:entity
@outputs Ready
@persist [Config Bones Temp]:table Ready
if(dupefinished()){reset()}
if(first()){
    Config=table()
    Bones=table()
    Temp=table()
    #[-- Usage:
        
        Ammo Storage Model Ver1.0 by Naki
        
        A rough recreation of the reloading mechanism of the t-64 soviet tank
        You can either leave the "Base" input unwired or wire it to what ever you want and then use the "position offset" value below to move the thing (altho i have not tried this yet, but it should work just fine)
        
        Wire "Gun" to your main gun
        Wire "AmmoBox" to one of your ammo boxes (there is no multiple ammo types in this yet)
        
        "max ammo" value defines the max amount of ammo you can have visually, do not exceed 15 as the rounds will clip into each other
        "no model" value will prevent the model from spawning, except the round itself, this is for optimization
        "shot model" value defines the round type
        "shell model" value defines the casing that is used
        
        Wire "Ready" to your weapon control mechanism instead of the Gun's "Ready" output, while this does increase your reload time slightly, it is preferable that you shoot when your loader has finished the animation
        
        The height of the gun compared to the ammo will not matter, it will adjust itself accordingly
        
        ---
        
        Optionally if you know how to code you can try to figure out how to implement entity:acfGunReloadProgress() sorry, i got lazy
        
    ]#
    #-- CONFIG HERE!!!
    
    Config["max ammo",number]=15
    
    Config["no model",number]=0
    
    Config["position offset",vector]=vec(0,0,0)
    
    Config["shot model",string]="models/munitions/round_100mm_shot.mdl"
    Config["shell model",string]="models/munitions/shell_casing.mdl"
    
    #-- CONFIG ENDS!!!
    
    #-- Automatic ammo count calculations
    Config["limit",number]=AmmoBox:acfAmmoCount()>0 ? clamp(AmmoBox:acfAmmoCount(),0,Config["max ammo",number]) : Config["max ammo",number]
    
    local I = 1
    local B = Base:isValid() ? Base : entity()
    holoCreate(I)
    holoPos(I,B:toWorld(Config["position offset",vector]))
    holoAng(I,B:toWorld(ang()))
    holoParent(I,B)
    holoAlpha(I,0)
    
    function createAmmo(I2){
        local I=1+I2*Config["limit",number]
        local Index = I*Config["max ammo",number]
        Bones["Shell_"+I2+"_Root",number] = Index
        
        local B2 = holoCreate(Index)
        holoPos(Index,holoEntity(1):toWorld(vec()))
        holoAng(Index,holoEntity(1):toWorld(ang(0,(360/Config["limit",number])*(I2-1),0)))
        holoParent(Index,holoEntity(1))
        holoAlpha(Index,0)
        
        local Parent = B2
        local Index = I*Config["limit",number]+1
        Bones["Shell_"+I2+"_Joint1",number] = Index
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(40,0,15)))
        holoAng(Index,Parent:toWorld(ang()))
        holoParent(Index,Parent)
        holoScale(Index,vec(0.25))
        holoAlpha(Index,0)
        if(!Config["no model",number]){
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint1",number])
        local Index = I*Config["limit",number]+2
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(-4,0,-15)))
        holoAng(Index,Parent:toWorld(ang()))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cylinders/size_4/cylinder_9x12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.8,0.8,3))
        holoClip(Index,vec(0,0,3),vec(1,0,0.3),0)
        holoClipEnabled(Index,1)
        
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint1",number])
        local Index = I*Config["limit",number]+3
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(-4,0,-15)))
        holoAng(Index,Parent:toWorld(ang()))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cylinders/size_4/cylinder_9x12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.8,-0.8,3))
        holoClip(Index,vec(0,0,3),vec(1,0,0.3),0)
        holoClipEnabled(Index,1)
        
        
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint1",number])
        local Index = I*Config["limit",number]+4
        local Parent2 = holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(-4,0,-19.5)))
        holoAng(Index,Parent:toWorld(ang(0,0,90)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/misc/sq_holes/sqhole_d0_12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.6,1,0.7))
        holoClip(Index,vec(0,0,3),vec(1,0,0),0)
        holoClipEnabled(Index,1)
        
        
        local Index = I*Config["limit",number]+5
        local Parent = Parent2
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(7*0.6,0,0)))
        holoAng(Index,Parent:toWorld(ang(0,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.1,0.25,0.7))
        
        local Index = I*Config["limit",number]+6
        local Parent = Parent2
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(0,0,7.5*0.6)))
        holoAng(Index,Parent:toWorld(ang(0,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.8,0.25,0.05))
        
        local Index = I*Config["limit",number]+7
        local Parent = Parent2
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(0,0,-7.5*0.6)))
        holoAng(Index,Parent:toWorld(ang(0,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.8,0.25,0.05))
        
        #joint rings
        local Index = I*Config["limit",number]+8
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint1",number])
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(-7,-4.25,-22)))
        holoAng(Index,Parent:toWorld(ang(0,0,90)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cylinders/size_4/cylinder_9x3.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.45,0.45,0.45))
        
        local Index = I*Config["limit",number]+9
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint1",number])
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(-7,4.25,-22)))
        holoAng(Index,Parent:toWorld(ang(0,0,90)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cylinders/size_4/cylinder_9x3.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.45,0.45,0.45))
        }
        #joint 2
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint1",number])
        local Index = I*Config["limit",number]+10
        Bones["Shell_"+I2+"_Joint2",number] = Index
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(-7,0,-22)))
        holoAng(Index,Parent:toWorld(ang(90,0,0)))
        holoParent(Index,Parent)
        holoScale(Index,vec(0.25))
        holoAlpha(Index,0)
        if(!Config["no model",number]){
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint2",number])
        local Index = I*Config["limit",number]+11
        local Parent2 = holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(7-4,0,-2.5)))
        holoAng(Index,Parent:toWorld(ang(0,0,90)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/misc/sq_holes/sqhole_d0_12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.6,1,0.6))
        holoClip(Index,vec(0,0,3),vec(1,0,0),0)
        holoClipEnabled(Index,1)
        
        
        local Index = I*Config["limit",number]+12
        local Parent = Parent2
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(7*0.6,0,0)))
        holoAng(Index,Parent:toWorld(ang(0,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.1,0.25,0.6))
        
        local Index = I*Config["limit",number]+13
        local Parent = Parent2
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(0,0,6.5*0.6)))
        holoAng(Index,Parent:toWorld(ang(0,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.8,0.25,0.05))
        
        local Index = I*Config["limit",number]+14
        local Parent = Parent2
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(0,0,-6.5*0.6)))
        holoAng(Index,Parent:toWorld(ang(0,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.8,0.25,0.05))
        
        local Parent = Parent2
        local Index = I*Config["limit",number]+15
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(0,-6,0)))
        holoAng(Index,Parent:toWorld(ang(90,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/misc/tubes_superthin/size_4/tube_72.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.152,0.2,0.152))
        holoClip(Index,vec(0,0,0),vec(0,0,1),0)
        holoClipEnabled(Index,1)
        
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint2",number])
        local Index = I*Config["limit",number]+16
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(7-4,0,-12)))
        holoAng(Index,Parent:toWorld(ang(0,0,90)))
        holoParent(Index,Parent)
        holoModel(Index,"models/sprops/geometry/fring_42.mdl")
        holoMaterial(Index,"")
        holoScale(Index,vec(0.2,0.6,0.2))
        }
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint1",number])
        local Index = I*Config["limit",number]+17
        Bones["Shell_"+I2+"_Shell",number] = Index
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(-4,0,1)))
        holoAng(Index,Parent:toWorld(ang(180,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,Config["shell model",string])
        
        local Parent = holoEntity(Bones["Shell_"+I2+"_Joint2",number])
        local Index = I*Config["limit",number]+18
        Bones["Shell_"+I2+"_Shot",number] = Index
        holoCreate(Index)
        holoPos(Index,Parent:toWorld(vec(7-4,0,-1)))
        holoAng(Index,Parent:toWorld(ang(90,0,0)))
        holoParent(Index,Parent)
        holoModel(Index,Config["shot model",string])
        Temp["total",number]=Temp["total",number]+19
    }
    timer("createAmmo",100)
}elseif(clk("createAmmo")){
    Success=holoRemainingSpawns()>=19
    if(Success){
        Temp["index",number]=Temp["index",number]+1
        if(Temp["index",number]>Config["limit",number]){
            timer("ammoDone",100)
        }else{
            timer("createAmmo",100)
            createAmmo(Temp["index",number])
        }
    }else{
        timer("createAmmo",100)
    }
}elseif(clk("ammoDone")){
    timer("runcode",100)
    Temp=table()
    hint("Ammo Created!",7)
    function number approach(Cur,Tar,R) {
        if (Cur < Tar) {
            return clamp(Cur + R,Cur,Tar)
        }elseif (Cur > Tar) {
            return clamp(Cur - R,Tar,Cur)
        }
        return Tar
    }
}elseif(clk("runcode")){
    timer("runcode",100)
    #for(I=1,Config["limit",number]){
        local I = Config["limit",number]-AmmoBox:acfRounds()
        local Joint1 = Bones["Shell_"+I+"_Joint1",number]
        local Joint2 = Bones["Shell_"+I+"_Joint2",number]
        local Shell = Bones["Shell_"+I+"_Shell",number]
        local Shot = Bones["Shell_"+I+"_Shot",number]
        holoAlpha(Bones["Shell_"+(I+1)+"_Shell",number],255)
        holoAlpha(Bones["Shell_"+(I+1)+"_Shot",number],255)
        
        if(changed(Gun:acfReady())&!Gun:acfReady()){
            Temp["reloadProgress",number]=Temp["reloadProgress2",number]=Temp["Loaded",number]=Temp["Ready",number]=Temp["isOnTarget",number]=0
            holoEntity(1):soundPlay("rotate",0,"acf_extra/tankfx/turretelectric2.wav")
            holoEntity(1):soundPlay("lift",0,"acf_extra/turret/cannon_turn_loop_1.wav")
        }
        Lift=!Temp["hold",number]*Temp["isOnTarget",number]*!Temp["Ready",number]
        soundVolume("lift",100*Lift)
        if(Temp["Ready",number]==0){
            if(Lift){
                Temp["reloadProgress",number]=Temp["reloadProgress",number]+0.02
            }
            if((Temp["reloadProgress",number]>=0.5)&!Temp["Loaded",number]&!Temp["hold",number]){
                Temp["hold",number]=1
                holoEntity(1):soundPlay("insert",0,"acf_extra/tankfx/gnomefather/autoloader1.wav")
            }
            if((Temp["reloadProgress",number]>=1)&!Temp["Ready",number]){
                Temp["Ready",number]=1
                soundStop("close")
            }
            if(Temp["hold",number]){
                Temp["reloadProgress2",number]=Temp["reloadProgress2",number]+0.05
                if(Temp["reloadProgress2",number]>=1){
                    Temp["Loaded",number]=1
                    Temp["hold",number]=0
                    Temp["reloadProgress2",number]=0
                    holoEntity(1):soundPlay("close",0,"acf_extra/tankfx/gnomefather/reload7.wav")
                }
                if(Temp["reloadProgress2",number]>=0.5){
                    holoAlpha(Shell,0)
                    holoAlpha(Shot,0)
                }
            }
        }
        Ready=Temp["Ready",number]*Gun:acfReady()
        
        Temp["targetAng",number]=approach(Temp["targetAng",number],(360/Config["limit",number])*clamp(I-1,0,Config["limit",number]),5)
        Temp["isOnTarget",number]=(abs(Temp["targetAng",number])-abs((360/Config["limit",number])*clamp(I-1,0,Config["limit",number])))==0
        
        soundVolume("rotate",100*!Temp["isOnTarget",number])
        
        holoAng(1,holoEntity(1):parent():toWorld(ang(0,360-Temp["targetAng",number],0)))
        
        local Progress2 = clamp(-1+sin((Temp["reloadProgress",number])*180)*2,0,1)
        local Progress3 = clamp(sin((Temp["reloadProgress",number])*180)*1.5,0,1)*(1-Progress2)
        local Progress4 = clamp(sin((Temp["reloadProgress",number])*180)*2,0,1)
        local Progress = clamp((-0.5+sin((Temp["reloadProgress",number])*180)*2)*0.7,-clamp(Progress4,0,0.2),1)
        local Progress5 = clamp(-0.25+sin((Temp["reloadProgress2",number])*180)*1.35,0,1)
        
        holoPos(Joint1,holoEntity(Joint1):parent():toWorld(vec(-bezier(vec(0),vec(20),vec(0),Progress4):x(),0,0)+mix(vec(40,0,(holoEntity(Joint1):parent():toLocal(Gun:pos())):z()-4),vec(40,0,15),Progress4)))
        holoAng(Joint1,holoEntity(Joint1):parent():toWorld(ang(90*Progress,0,0)))
        
        holoAng(Joint2,holoEntity(Joint2):parent():toWorld(ang(90-90*Progress2+90*Progress3,0,0)))
        
        holoPos(Shell,holoEntity(Shell):parent():toWorld(vec(-4,0,1)+vec(0,0,-75*Progress5)))
        holoPos(Shot,holoEntity(Shot):parent():toWorld(vec(7-4,0,-1)+vec(0,0,-75*Progress5)))
        
    #}
}
